  1 %include "/usr/local/share/csc314/asm_io.inc"
  2
  3
  4 ; the file that stores the initial state
  5 %define BOARD_FILE1 '100m.txt'
  6 %define BOARD_FILE2 '400m.txt'
  7 %define BOARD_FILE3 '100mhurdles.txt'
  8
  9
 10 ; how to represent everything
 11 %define WALL_CHAR '#'
 12 %define PLAYER_CHAR 'R'
 13 %define FINISH_LINE_CHAR '|'
 14 %define HURDLE_CHAR ']'
 15 %define TICK 100000             ; 1/10th of a second
 16
 17 ; the size of the game screen in characters
 18 %define HEIGHT 19
 19 %define WIDTH 71
 20
 21 ; the player starting position.
 22 ; top left is considered (0,0)
 23 %define STARTX 11
 24 %define STARTY 16
 25
 26 ; these keys do things
 27 %define EXITCHAR 'x'
 28 %define UPCHAR 'w'
 29 %define LEFTCHAR 'a'
 30 %define DOWNCHAR 's'
 31 %define RIGHTCHAR 'd'
 32 %define JUMPCHAR 'j'
 33
 34
 35 segment .data
 36
 37     ; used to fopen() the board file defined above
 38     board_file1         db BOARD_FILE1,0
 39     board_file2         db BOARD_FILE2,0
 40     board_file3         db BOARD_FILE3,0
 41
 42     ; used to change the terminal mode
 43     mode_r              db "r",0
 44     raw_mode_on_cmd     db "stty raw -echo",0
 45     raw_mode_off_cmd    db "stty -raw echo",0
 46
 47     ; called by system() to clear/refresh the screen
 48     clear_screen_cmd    db "clear",0
 49
 50     ; things the program will print
 51     menu_str            db 10,"CHOOSE YOUR RACE. The race will begin when you hit 'ENTER'.",10,10, \
 52                                 "(1) 100 meter sprint",10, \
 53                                 "(2) 400 meter dash",10, \
 54                                 "(3) 100 meter hurdles",10,10, \
 55                                 "Choice: ",0
 56
 57     help_str            db 13,10,"Controls: ", \
 58                             UPCHAR,"=UP / ", \
 59                             LEFTCHAR,"=LEFT / ", \
 60                             DOWNCHAR,"=DOWN / ", \
 61                             RIGHTCHAR,"=RIGHT / ", \
 62                             JUMPCHAR,"=JUMP / ", \
 63                             EXITCHAR,"=EXIT", \
 64                             13,10,10,0
 65
 66     finish_str          db  10,"Your final time is %d.%d seconds.",10,10,0
 67
 68     time_counter        dd  0
 69     time_fmt            db  "Time: %d",10,13,0
 70
 71 segment .bss
 72
 73     ; this array stores the current rendered gameboard (HxW)
 74     board   resb    (HEIGHT * WIDTH)
 75
 76     ; these variables store the current player position
 77     xpos    resd    1
 78     ypos    resd    1
 79
 80     ; stores the menu input
 81     input   resd    1
 82 segment .text
 83
 84     global  asm_main
 85     global  raw_mode_on
 86     global  raw_mode_off
 87     global  init_board
 88     global  render
 89
 90     extern  system
 91     extern  putchar
 92     extern  getchar
 93     extern  printf
 94     extern  fopen
 95     extern  fread
 96     extern  fgetc
 97     extern  fclose
 98     extern  usleep
 99     extern  fcntl
100
101 asm_main:
102     enter   0,0
103     pusha
104     ;***************CODE STARTS HERE***************************
105
106     game_start:
107     ; print menu
108     push    menu_str
109     call    printf
110     add     esp, 4
111
112     ; take and check input
113     call    read_int
114     mov     DWORD [input], eax
115
116     cmp     DWORD [input], 3
117     jg      program_end
118
119     start_race:
120     ; put the terminal in raw mode so the game works nicely
121     call    raw_mode_on
122
123     ; read the game board file into the global variable
124     call    init_board
125
126     ; set the player at the proper start position
127     mov     DWORD [xpos], STARTX
128     mov     DWORD [ypos], STARTY
129
130     ; the game happens in this loop
131     ; the steps are...
132     ;   1. render (draw) the current board
133     ;   2. get a character from the user
134     ;   3. store current xpos,ypos in esi,edi
135     ;   4. update xpos,ypos based on character from user
136     ;   5. check what's in the buffer (board) at new xpos,ypos
137     ;   6. if it's a wall, reset xpos,ypos to saved esi,edi
138     ;   7. otherwise, just continue! (xpos,ypos are ok)
139     game_loop:
140
141         push    TICK
142         call    usleep
143         add     esp, 4
144
145         inc     DWORD [time_counter]
146
147         ; draw the game board
148         call    render
149
150         ; get an action from the user
151         call    nonblocking_getchar
152         cmp     al, -1
153         je      game_loop
154
155         ; store the current position
156         ; we will test if the new position is legal
157         ; if not, we will restore these
158         mov     esi, [xpos]
159         mov     edi, [ypos]
160
161         ; choose what to do
162         cmp     eax, EXITCHAR
163         je      program_end
164         cmp     eax, UPCHAR
165         je      move_up
166         cmp     eax, LEFTCHAR
167         je      move_left
168         cmp     eax, DOWNCHAR
169         je      move_down
170         cmp     eax, RIGHTCHAR
171         je      move_right
172         cmp     eax, JUMPCHAR
173         je      jump_hurdle
174         jmp     input_end           ; or just do nothing
175
176         ; move the player according to the input character
177         move_up:
178             dec     DWORD [ypos]
179             jmp     input_end
180         move_left:
181             dec     DWORD [xpos]
182             jmp     input_end
183         move_down:
184             inc     DWORD [ypos]
185             jmp     input_end
186         move_right:
187             inc     DWORD [xpos]
188             jmp     input_end
189         jump_hurdle:
190             inc     DWORD [xpos]
191             mov     ebx, 1
192         input_end:
193
194         ; (W * y) + x = pos
195
196         ; compare the current position to the wall character
197         mov     eax, WIDTH
198         mul     DWORD [ypos]
199         add     eax, [xpos]
200         lea     eax, [board + eax]
201         cmp     BYTE [eax], HURDLE_CHAR
202         je      invalid_move
203         cmp     BYTE [eax], WALL_CHAR
204         jne     valid_move
205             ; opps, that was an invalid move, reset
206             invalid_move:
207             ; do not reset if 'j' was inputed
208             cmp     ebx, 1
209             je      valid_move
210             mov     DWORD [xpos], esi
211             mov     DWORD [ypos], edi
212
213             valid_move:
214             ; resets ebx back to 0 after jump
215             mov     ebx, 0
216             cmp     BYTE [eax], FINISH_LINE_CHAR
217             je      game_loop_end
218
219     jmp     game_loop
220     game_loop_end:
221     ; show player crossing the finish line
222     call    render
223
224
225     ; restore old terminal functionality
226     call raw_mode_off
227
228     ; calculate time
229     mov     eax, DWORD [time_counter]
230     mov     ecx, 10
231     idiv    ecx
232
233     ; print finish string
234     push    edx
235     push    eax
236     push    finish_str
237     call    printf
238     add     esp, 12
239
240     program_end:
241     ;***************CODE ENDS HERE*****************************
242     popa
243     mov     eax, 0
244     leave
245     ret
246
247 ; === FUNCTION ===
248 raw_mode_on:
249
250     push    ebp
251     mov     ebp, esp
252
253     push    raw_mode_on_cmd
254     call    system
255     add     esp, 4
256
257     mov     esp, ebp
258     pop     ebp
259     ret
260
261 ; === FUNCTION ===
262 raw_mode_off:
263
264     push    ebp
265     mov     ebp, esp
266
267     push    raw_mode_off_cmd
268     call    system
269     add     esp, 4
270
271     mov     esp, ebp
272     pop     ebp
273     ret
274
275 ; === FUNCTION ===
276 init_board:
277
278     push    ebp
279     mov     ebp, esp
280
281     ; FILE* and loop counter
282     ; ebp-4, ebp-8
283     sub     esp, 8
284
285     ; open the file
286     push    mode_r
287
288         cmp     DWORD [input], 1
289         jne     check2
290         push    board_file1
291         jmp     return
292
293         check2:
294         cmp     DWORD [input], 2
295         jne     check3
296         push    board_file2
297         jmp     return
298
299         check3:
300         cmp     DWORD [input], 3
301         jne     program_end
302         push    board_file3
303
304     return:
305     call    fopen
306     add     esp, 8
307     mov     DWORD [ebp-4], eax
308
309     ; read the file data into the global buffer
310     ; line-by-line so we can ignore the newline characters
311     mov     DWORD [ebp-8], 0
312     read_loop:
313     cmp     DWORD [ebp-8], HEIGHT
314     je      read_loop_end
315
316         ; find the offset (WIDTH * counter)
317         mov     eax, WIDTH
318         mul     DWORD [ebp-8]
319         lea     ebx, [board + eax]
320
321         ; read the bytes into the buffer
322         push    DWORD [ebp-4]
323         push    WIDTH
324         push    1
325         push    ebx
326         call    fread
327         add     esp, 16
328
329         ; slurp up the newline
330         push    DWORD [ebp-4]
331         call    fgetc
332         add     esp, 4
333
334     inc     DWORD [ebp-8]
335     jmp     read_loop
336     read_loop_end:
337
338     ; close the open file handle
339     push    DWORD [ebp-4]
340     call    fclose
341     add     esp, 4
342
343     mov     esp, ebp
344     pop     ebp
345     ret
346
347 ; === FUNCTION ===
348 render:
349
350     push    ebp
351     mov     ebp, esp
352
353     ; two ints, for two loop counters
354     ; ebp-4, ebp-8
355     sub     esp, 8
356
357     ; clear the screen
358     push    clear_screen_cmd
359     call    system
360     add     esp, 4
361
362     ; print the help information
363     push    help_str
364     call    printf
365     add     esp, 4
366
367     ;print score
368     push    DWORD [time_counter]
369     push    time_fmt
370     call    printf
371     add     esp, 8
372
373     ; outside loop by height
374     ; i.e. for(c=0; c<height; c++)
375     mov     DWORD [ebp-4], 0
376     y_loop_start:
377     cmp     DWORD [ebp-4], HEIGHT
378     je      y_loop_end
379
380         ; inside loop by width
381         ; i.e. for(c=0; c<width; c++)
382         mov     DWORD [ebp-8], 0
383         x_loop_start:
384         cmp     DWORD [ebp-8], WIDTH
385         je      x_loop_end
386
387             ; check if (xpos,ypos)=(x,y)
388             mov     eax, [xpos]
389             cmp     eax, DWORD [ebp-8]
390             jne     print_board
391             mov     eax, [ypos]
392             cmp     eax, DWORD [ebp-4]
393             jne     print_board
394                 ; if both were equal, print the player
395                 push    PLAYER_CHAR
396                 jmp     print_end
397             print_board:
398                 ; otherwise print whatever's in the buffer
399                 mov     eax, [ebp-4]
400                 mov     ebx, WIDTH
401                 mul     ebx
402                 add     eax, [ebp-8]
403                 mov     ebx, 0
404                 mov     bl, BYTE [board + eax]
405                 push    ebx
406             print_end:
407             call    putchar
408             add     esp, 4
409
410         inc     DWORD [ebp-8]
411         jmp     x_loop_start
412         x_loop_end:
413
414         ; write a carriage return (necessary when in raw mode)
415         push    0x0d
416         call    putchar
417         add     esp, 4
418
419         ; write a newline
420         push    0x0a
421         call    putchar
422         add     esp, 4
423
424     inc     DWORD [ebp-4]
425     jmp     y_loop_start
426     y_loop_end:
427
428     mov     esp, ebp
429     pop     ebp
430     ret
431
432 ; === FUNCTION ===
433 nonblocking_getchar:
434
435 ; returns -1 on no-data
436 ; returns char on succes
437
438 ; magic values
439 %define F_GETFL 3
440 %define F_SETFL 4
441 %define O_NONBLOCK 2048
442 %define STDIN 0
443
444     push    ebp
445     mov     ebp, esp
446
447     ; single int used to hold flags
448     ; single character (aligned to 4 bytes) return
449     sub     esp, 8
450
451     ; get current stdin flags
452     ; flags = fcntl(stdin, F_GETFL, 0)
453     push    0
454     push    F_GETFL
455     push    STDIN
456     call    fcntl
457     add     esp, 12
458     mov     DWORD [ebp-4], eax
459
460     ; set non-blocking mode on stdin
461     ; fcntl(stdin, F_SETFL, flags | O_NONBLOCK)
462     or      DWORD [ebp-4], O_NONBLOCK
463     push    DWORD [ebp-4]
464     push    F_SETFL
465     push    STDIN
466     call    fcntl
467     add     esp, 12
468
469     call    getchar
470     mov     DWORD [ebp-8], eax
471
472     ; restore blocking mode
473     ; fcntl(stdin, F_SETFL, flags ^ O_NONBLOCK
474     xor     DWORD [ebp-4], O_NONBLOCK
475     push    DWORD [ebp-4]
476     push    F_SETFL
477     push    STDIN
478     call    fcntl
479     add     esp, 12
480
481     mov     eax, DWORD [ebp-8]
482
483     mov     esp, ebp
484     pop     ebp
485     ret
